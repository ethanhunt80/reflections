When would you want to use a remote repository rather than keeping all your work local?

As I see almost always when you need to have things stored in a trustworthy manner, somewhere you can trust you won't
lose all the changes/creation you made.
Also when you want to share the work you've done with your peers.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your
 remote repository?

Automatic pulls could overwrite my local repository and I might lose changes that are valuable to me and that I don't
wish to have either pushed or pulled (deleted in this case).

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- 'Forkses' happen only in the GitHub context, it's like a clone but in GitHub's own infrastructure in the cloud.
- Clones are the local repository copies that we can make from repositories that are in the cloud (in this case GitHub
specifically)
- Branches are what the name say, branches (or changes) from the root that we can make without affecting it.
It's good for experimentation without the fear of breaking the main functionality.

I'd use a Fork to only copy the project that I want to, but I'm not sure I'd continue to make changes to the code
in the cloud environment as it may not be very productive, but I can change my mind about that if I notice there were
no major differences (which I doubt).
Clones are good to have the code you just forked into your local machine so that you can manipulate it freely and
make your own changes/experimentation using branches for example.

What is the benefit of having a copy of the last known state of the remote stored locally?
To work with the most up to date code and have possible changes from others that may be working in the same code/project.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Probably I'd use another form of folder interaction. It's harder as we don't know whether there's someone editing anything or not.
It's not possible to revert changes and there's no easy way to control edition/addition.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Ohh almost always as the master branch is 'sacred' and should only be touched when there's 100% certainty that the changes being added
won't affect what is already in place. So, overall I mostly see benefits in working with local branches as they allow us to try.
The only downside of remote branches is the process to keep them up to date with the master and its changes (imagine if we have tens of
developers submitting changes to the master - that could be a challenge).
